load("render.star", "render")
load("time.star", "time")

DATA = <%= data_as_starlark_dict %>

def main(config):
  timezone = config.get("timezone") or "America/New_York"
  now = time.now().in_location(timezone)
  lines = fuzzy_time_lines(now)
  color = "#c7cafe"
  rows = [render.Box(height = 2)]

  if len(lines) == 2:
    rows.append(
      render.Text(
        content = lines[0],
        font = "tb-8",
        color = color,
      ),
    )
    rows.append(
      render.Text(
        content = lines[1],
        font = "tb-8",
        color = color,
      ),
    )

  else:
    if len(lines) == 1:
      line = lines[0]
    else:
      line = "BAD LINE LEN = %d" % len(lines)

    rows.append(
      render.Padding(
        pad = (0, 4, 0, 4),
        child = render.Text(
          content = lines[0],
          font = "tb-8",
          color = color,
        ),
      ),
    )

  bottom_row_items = [
    render.Text(
          content = formatted_temperature(DATA["temperature"]),
          font = "tb-8",
          color = "#ffffff"
    )
  ]

  ## Add custom things here
  # bottom_row_items.append(
  #   render.Text(
  #     content = "TODO.rb",
  #     font = "tb-8",
  #     color = "#ffffff"
  #   )
  # )

  ## Birthday countdown
  if now.year == 2025 and now.month <= 5:
    bd_days = -1

    if now.month == 3:
      bd_days = (31 - now.day) + 30 + 2
    elif now.month == 4:
      bd_days = (30 - now.day) + 2
    elif now.month == 5 and now.day == 1:
      bd_days = 1
    elif now.month == 5 and now.day == 2:
      bd_days = 0
    else:
      bd_days = -1

    if bd_days >= 0:
      if bd_days == 0:
        bd_text = "BIRTHDAY"
      elif bd_days == 1:
        bd_text = "1 day"
      else:
        bd_text = "%s days" % bd_days

      bottom_row_items.append(
        render.Text(
          content = bd_text,
          font = "tb-8",
          color = "#BF40BF"
        )
      )

  rows.append(
    render.Padding(
      pad = (0, 4, 0, 0),
      child = render.Row(
        children = bottom_row_items,
        expanded = True,
        main_align = "space_evenly",
      )
    )
  )


  return render.Root(
    child = render.Box(
      padding = 0,
      child = render.Column(
        expanded = True,
        cross_align = "center",
        children = rows,
      ),
    ),
  )


def formatted_temperature(input):
  temp = int(input)
  if temp < 0:
    return "%s°" % temp
  else:
    return " %s°" % temp

def fuzzy_time_lines(now):
  hour = now.hour
  next_hour = (now.hour + 1) % 24

  if now.minute <= 1 or (now.minute == 2 and now.second <= 30):
    return [hour_word(hour)]
  elif now.minute <= 6 or (now.minute == 7 and now.second <= 30):
    return ["just after", hour_word(hour)]
  elif now.minute <= 11 or (now.minute == 12 and now.second <= 30):
    return ["ten after", hour_word(hour)]
  elif now.minute <= 16 or (now.minute == 17 and now.second <= 30):
    return ["quarter after", hour_word(hour)]
  elif now.minute <= 21 or (now.minute == 22 and now.second <= 30):
    return ["twenty after", hour_word(hour)]
  elif now.minute <= 26 or (now.minute == 27 and now.second <= 30):
    return ["almost", "%s thirty" % hour_word(hour, True) ]
  elif now.minute <= 31 or (now.minute == 32 and now.second <= 30):
    return [hour_word(hour, True), "thirty"]
  elif now.minute <= 36 or (now.minute == 37 and now.second <= 30):
    return [hour_word(hour, True), "thirty five"]
  elif now.minute <= 41 or (now.minute == 42 and now.second <= 30):
    return ["twenty to", hour_word(next_hour)]
  elif now.minute <= 46 or (now.minute == 47 and now.second <= 30):
    return ["quarter to", hour_word(next_hour)]
  elif now.minute <= 51 or (now.minute == 52 and now.second <= 30):
    return ["ten to", hour_word(next_hour)]
  elif now.minute <= 56 or (now.minute == 57 and now.second <= 30):
    return ["almost", hour_word(next_hour)]
  elif now.minute <= 59:
    return [hour_word(next_hour)]
  else:
    return ["%s-ish" % hour_word(hour)]

def hour_word(hour, numeric_twelve = False):
  if hour == 0:
    if numeric_twelve:
      return "twelve"
    else:
      return "midnight"
  elif hour == 12:
    if numeric_twelve:
      return "twelve"
    else:
      return "noon"
  elif hour > 12:
    return hour_word(hour - 12)
  elif hour == 1:
    return "one"
  elif hour == 2:
    return "two"
  elif hour == 3:
    return "three"
  elif hour == 4:
    return "four"
  elif hour == 5:
    return "five"
  elif hour == 6:
    return "six"
  elif hour == 7:
    return "seven"
  elif hour == 8:
    return "eight"
  elif hour == 9:
    return "nine"
  elif hour == 10:
    return "ten"
  elif hour == 11:
    return "eleven"
  else:
    return "???"
